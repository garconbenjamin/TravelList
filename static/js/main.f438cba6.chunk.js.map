{"version":3,"sources":["context.js","pages/TravelInfo.js","components/ItemCard.js","pages/TravelList.js","App.js","serviceWorker.js","index.js"],"names":["context","createContext","Provider","Consumer","monthsToZh","TravelInfo","props","contextValue","useContext","content","dispatch","likedSpot","state","id","params","dataInfo","find","ele","useState","introOpen","setIntroOpen","name","introduction","open_time","address","tel","email","months","nlat","elong","official_site","ticket","remind","target","service","images","geoPostion","monthsArr","split","spacing","text","replace","monthText","length","sort","a","b","map","m","idx","join","pagination","el","clickable","navigation","nextEl","prevEl","i","key","className","src","alt","dangerouslySetInnerHTML","__html","onClick","href","t","s","center","zoom","R","arr","anchor","offset","type","payload","ItemCard","data","index","name_zh","distric","category","to","style","backgroundImage","cat","filter","e","stopPropagation","TavelList","isLoading","Array","initState","currentPage","totalPage","categories","active","todoReducer","action","newItem","newPage","newArr","Header","App","useReducer","setContent","setIsLoading","globalState","useEffect","ignore","setTimeout","async","fetch","headers","accept","result","json","jsonObj","fetchData","value","base","process","path","TravelList","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f438cba6.chunk.js","sourcesContent":["import React, { createContext, useReducer } from \"react\";\nconst context = createContext();\nexport const { Provider, Consumer } = context;\nexport default context;\n","import React, { useContext, useState, Fragment } from \"react\";\nimport context from \"./../context\";\nimport Map from \"pigeon-maps\";\nimport Marker from \"pigeon-marker\";\nimport Overlay from \"pigeon-overlay\";\nimport Swiper from \"react-id-swiper\";\nimport * as R from \"ramda\";\n\nimport { GoTrashcan, GoHeart } from \"react-icons/go\";\nconst monthsToZh = [\n  \"一\",\n  \"二\",\n  \"三\",\n  \"四\",\n  \"五\",\n  \"六\",\n  \"七\",\n  \"八\",\n  \"九\",\n  \"十\",\n  \"十一\",\n  \"十二\"\n];\nconst TravelInfo = props => {\n  const contextValue = useContext(context);\n  const { content, dispatch, state } = contextValue;\n  const { likedSpot } = state;\n  const { id } = props.params;\n  const dataInfo = content.find(ele => +ele.id === +id);\n  const [introOpen, setIntroOpen] = useState(false);\n\n  return (\n    <Fragment>\n      {dataInfo\n        ? (() => {\n            //prettier-ignore\n            const {name,introduction,open_time,address,tel,email,months,nlat,elong,official_site,ticket,remind,target,service,images} = dataInfo;\n            const geoPostion = [nlat, elong];\n            const monthsArr = months.split(\",\");\n\n            const spacing = text => text.replace(/\\r\\n/g, \"<br/>\");\n            const monthText =\n              monthsArr.length === 12\n                ? \"全年無休\"\n                : monthsArr\n                    .sort((a, b) => a - b)\n                    .map((m, idx) => monthsToZh[+m] + \"月\")\n                    .join(\" / \");\n\n            return (\n              <div id=\"travel-info\">\n                <Swiper\n                  pagination={{\n                    el: \".swiper-pagination\",\n                    clickable: true\n                  }}\n                  navigation={{\n                    nextEl: \".swiper-button-next\",\n                    prevEl: \".swiper-button-prev\"\n                  }}\n                >\n                  {images ? (\n                    images.map((ele, i) => (\n                      <div key={i} className=\"slider-film\">\n                        <img src={ele.src} alt=\"\" />\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"slider-film\">No Picture</div>\n                  )}\n                </Swiper>\n                <div className=\"info-text\">\n                  <div className=\"title\">{name}</div>\n                  {introduction ? (\n                    <div className=\"intro\">\n                      <div\n                        dangerouslySetInnerHTML={{\n                          __html: spacing(introduction)\n                        }}\n                        className={`text-area ${introOpen ? \"open\" : \"\"}`}\n                      />\n                      <div>\n                        <button onClick={() => setIntroOpen(!introOpen)}>\n                          {introOpen ? \"-\" : \"+\"}\n                        </button>\n                      </div>\n                    </div>\n                  ) : null}\n                  <div className=\"detail-list\">\n                    <ul>\n                      {address ? (\n                        <li>\n                          <span className=\"info-type\">地址</span>\n                          <span className=\"info\">{address.split(\" \")[1]}</span>\n                        </li>\n                      ) : null}\n                      {tel ? (\n                        <li>\n                          <span className=\"info-type\">電話</span>\n                          <span className=\"info\">{tel}</span>\n                        </li>\n                      ) : null}\n                      {open_time ? (\n                        <li>\n                          <span className=\"info-type\">開放時間</span>\n                          <span\n                            className=\"info\"\n                            dangerouslySetInnerHTML={{\n                              __html: spacing(open_time)\n                            }}\n                          />\n                        </li>\n                      ) : null}\n                      {email ? (\n                        <li>\n                          <span className=\"info-type\">Email</span>\n                          <span className=\"info\">{email}</span>\n                        </li>\n                      ) : null}\n                      {monthText ? (\n                        <li>\n                          <span className=\"info-type\">開放月份</span>\n                          <span className=\"info\">{monthText}</span>\n                        </li>\n                      ) : null}\n                      {ticket ? (\n                        <li>\n                          <span className=\"info-type\">門票資訊</span>\n                          <span\n                            className=\"info\"\n                            dangerouslySetInnerHTML={{\n                              __html: spacing(ticket)\n                            }}\n                          />\n                        </li>\n                      ) : null}\n                      {remind ? (\n                        <li>\n                          <span className=\"info-type\">注意事項</span>\n                          <span\n                            className=\"info\"\n                            dangerouslySetInnerHTML={{\n                              __html: spacing(remind)\n                            }}\n                          />\n                        </li>\n                      ) : null}\n                      {official_site ? (\n                        <li>\n                          <span className=\"info-type\">官方網站</span>\n                          <span className=\"info\">\n                            <a href={official_site} target=\"_blank\">\n                              {official_site}\n                            </a>\n                          </span>\n                        </li>\n                      ) : null}\n                      {target.length ? (\n                        <li>\n                          <span className=\"info-type\">適合族群</span>\n                          <span className=\"info\">\n                            {target.map((t, i) => t.name).join(\" / \")}\n                          </span>\n                        </li>\n                      ) : null}\n                      {service.length ? (\n                        <li>\n                          <span className=\"info-type\">具備設施</span>\n                          <span className=\"info\">\n                            {service.map((s, i) => s.name).join(\"、\")}\n                          </span>\n                        </li>\n                      ) : null}\n                    </ul>\n                  </div>\n                </div>\n                <div className=\"map-wrapper\">\n                  <Map center={geoPostion} zoom={12}>\n                    {R.uniq([...likedSpot, { id, geoPostion, name }]).map(\n                      (ele, i, arr) => (\n                        <Marker key={i} anchor={ele.geoPostion} />\n                      )\n                    )}\n                    <Overlay anchor={geoPostion} offset={[120, 79]}>\n                      <div className=\"overlay-label\">\n                        <div>{name}</div>\n\n                        <div className=\"btn-group\">\n                          {likedSpot.find(ele => ele.id === id) ? (\n                            <button\n                              onClick={() => {\n                                dispatch({\n                                  type: \"REMOVE_LIKE\",\n                                  payload: { id }\n                                });\n                              }}\n                            >\n                              <GoTrashcan />\n                            </button>\n                          ) : (\n                            <button\n                              onClick={() =>\n                                dispatch({\n                                  type: \"ADD_LIKE\",\n                                  payload: {\n                                    id,\n                                    name,\n                                    geoPostion\n                                  }\n                                })\n                              }\n                            >\n                              <GoHeart />\n                            </button>\n                          )}\n                        </div>\n                      </div>\n                    </Overlay>\n                  </Map>\n                </div>\n              </div>\n            );\n          })()\n        : null}\n    </Fragment>\n  );\n};\n\nexport default TravelInfo;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { GoLocation } from \"react-icons/go\";\nimport { MdWeb } from \"react-icons/md\";\nimport { Link } from \"wouter\";\n\nconst ItemCard = props => {\n  const { data, index } = props;\n\n  const { id, name, name_zh, distric, official_site, category, images } = data;\n  return (\n    <Link to={`/${id}`}>\n      <div className=\"card-wrapper\">\n        <div className=\"card\">\n          <div\n            className=\"card-img\"\n            style={\n              images[0] ? { backgroundImage: `url(${images[0].src})` } : null\n            }\n          >\n            {images[0] ? null : <span className=\"text-holder\">No Image</span>}\n          </div>\n          <div className=\"card-text\">\n            <div className=\"title\"> {name || name_zh}</div>\n            <ul>\n              {distric ? (\n                <li>\n                  <GoLocation />\n                  <span>{distric}</span>\n                </li>\n              ) : null}\n\n              <li>\n                {category\n                  ? category.map((cat, idx) => (\n                      <span\n                        className=\"hashtag\"\n                        style={{\n                          filter: `hue-rotate(${+cat.id * 5}deg)`\n                        }}\n                        key={idx}\n                      >\n                        #{cat.name}\n                      </span>\n                    ))\n                  : null}\n              </li>\n            </ul>\n            {official_site ? (\n              <a\n                target=\"_blank\"\n                className=\"official-site\"\n                href={official_site}\n                onClick={e => {\n                  e.stopPropagation();\n                }}\n              >\n                <MdWeb />\n                官方網站\b\n              </a>\n            ) : null}\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n};\nexport default ItemCard;\n","import React, { useContext } from \"react\";\nimport context from \"./../context\";\nimport ItemCard from \"./../components/ItemCard\";\n\nconst TavelList = () => {\n  const contextValue = useContext(context);\n  const { content, dispatch, isLoading } = contextValue;\n\n\n  return (\n    <div className=\"travel-list\">\n      <div className=\"card-list\">\n        {content.map((ele, i) => {\n          return <ItemCard data={ele} index={i} key={i} />;\n        })}\n        {isLoading\n          ? [...Array(4)].map((ele, index) => (\n              <div className=\"card-wrapper\" key={index}>\n                <div className=\"card skeleton\">Loading...</div>\n              </div>\n            ))\n          : null}\n      </div>\n      {content.length ? (\n        <div className=\"button-wrapper\">\n          <button\n            className={isLoading ? \"loading\" : \"\"}\n            onClick={() => {\n              dispatch({ type: \"NEXT_PAGE\" });\n            }}\n          >\n            <span>Load more</span>\n          </button>\n        </div>\n      ) : null}\n    </div>\n  );\n};\nexport default TavelList;\n","import React, { useReducer, useEffect, useState } from \"react\";\nimport { Provider } from \"./context\";\nimport TravelInfo from \"./pages/TravelInfo\";\nimport TravelList from \"./pages/TravelList\";\nimport { Router, Route } from \"wouter\";\n\nconst categories = [\n  { id: 11, name: \"養生溫泉\", active: false },\n  { id: 12, name: \"單車遊蹤\", active: false },\n  { id: 13, name: \"歷史建築\", active: false },\n  { id: 14, name: \"宗教信仰\", active: false },\n  { id: 15, name: \"藝文館所\", active: false },\n  { id: 18, name: \"公共藝術\", active: false },\n  { id: 16, name: \"戶外踏青\", active: false },\n  { id: 17, name: \"藍色水路\", active: false },\n  { id: 19, name: \"親子共遊\", active: false },\n  { id: 20, name: \"北北基景點\", active: false },\n  { id: 23, name: \"夜市商圈\", active: false },\n  { id: 24, name: \"主題商街\", active: false },\n  { id: 25, name: \"無障礙旅遊推薦景點\", active: false }\n];\n\nconst initState = { currentPage: 1, totalPage: 0, likedSpot: [], categories };\nconst todoReducer = (state, action) => {\n  const { currentPage, totalPage, categories, likedSpot } = state;\n  switch (action.type) {\n    case \"ADD_LIKE\":\n      const newItem = action.payload;\n      return { ...state, likedSpot: [...likedSpot, newItem] };\n    case \"NEXT_PAGE\":\n      const newPage = currentPage + 1;\n      return { ...state, currentPage: newPage };\n    case \"REMOVE_LIKE\":\n      const { id } = action.payload;\n      const newArr = likedSpot.filter(ele => ele.id !== id);\n      return { ...state, likedSpot: newArr };\n    default:\n      return state;\n  }\n};\nconst Header = props => {\n  const { text } = props;\n  return <header>{text}</header>;\n};\nconst App = () => {\n  const [state, dispatch] = useReducer(todoReducer, initState);\n  const { totalPage, currentPage } = state;\n  const [content, setContent] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const globalState = { state, dispatch, content, isLoading };\n  useEffect(() => {\n    let ignore = false;\n    const fetchData = async () => {\n      const result = await fetch(\n        `https://www.travel.taipei/open-api/zh-tw/Attractions/All?page=${currentPage}`,\n        {\n          headers: {\n            accept: \"application/json\"\n          }\n        }\n      );\n      const jsonObj = await result.json();\n      const { data } = jsonObj;\n\n      if (!ignore) {\n        setContent([...content, ...data]);\n      }\n    };\n    if (currentPage > totalPage) {\n      setIsLoading(true);\n\n      setTimeout(() => {\n        fetchData();\n      }, 1500);\n      setTimeout(() => {\n        setIsLoading(false);\n      }, 2000);\n    }\n\n    return () => {\n      ignore = true;\n    };\n  }, [currentPage]);\n\n  return (\n    <Provider value={globalState}>\n      <Router base={process.env.PUBLIC_URL}>\n        <Route path=\"/\">\n          <Header text=\"台北市特色景點\" />\n          <TravelList />\n        </Route>\n        <Route exact path=\"/:id\">\n          {params => <TravelInfo params={params} />}\n        </Route>\n      </Router>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./stylesheets/index.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}